// js vscode에서 돌리는 법
// 1. 파일 무조건 저장하고 Crtl + Alt + N
// 2. 터미널 창 열고 node 파일명.js

// js scope
//    ㄴ 1. 안쪽 스코프에서 바깥쪽 스코프로 접근할 수 있지만, 반대는 불가능하다.
//             ㄴ 바깥쪽 스코프에서 선언한 식별자는 안쪽 스코프에서 사용 가능하지만, 안쪽에서 선언한 식별자는 바깥쪽 스코프에서는 사용할 수 없다.
//    ㄴ 2. 스코프는 중첩이 가능하다.
//    ㄴ 3. 전역 스코프와 지역 스코프
//    ㄴ 4. 지역 변수는 전역 변수보다 우선순위가 더 높다.
//             ㄴ 전역 스코프에서 선언한 변수는 전역 변수이다.
//             ㄴ 지역 스코프에서 선언한 변수는 지역 변수이다.
//             ㄴ 지역 변수는 전역 변수보다 더 높은 우선순위를 가진다.

// js 변수선언 방법
// 1. var = 변수를 선언, 추가로 동시에 값을 초기화
//     ㄴ var i; => undefinded i가 선언됨
//     ㄴ var sum = 0; => 선언과 초기화
//     ㄴ var i, sum; => 한번에 여러 개의 변수를 함께 선언할 수 있음.
//     ㄴ 유효범위 : 함수 스코프
//     ㄴ 값 재할당 : 가능
//     ㄴ 재선언 : 가능
// 2. let = 블록 스코프 지역 변수를 선언, 추가로 동시에 값을 초기화
//     ㄴ 변수가 선언된 블록, 구문 또는 표현식 내에서만 유효한 변수를 선언함.
//     ㄴ var vs let
//        1. var는 전역 객체의 프로퍼티를 생성하지만, let은 전역 객체의 속성 값을 생성하지 않는다.
//        2. var = 전역변수, let = 지역변수
// 3. const = 블록 스코프 읽기 전용 상수를 선언
//     ㄴ 유효범위 : 블록
//     ㄴ 값 재할당 : 불가능
//     ㄴ 재선언 : 불가능

// 블록 스코프 안에서 let과 const 키워드로 선언한 변수는 스코프 안에서만 참조 가능하다. 단, var은 블록스코프를 무시할 수 있따.
// js 성질
// 1. Hoisting
//     ㄴ 자바스크립트 코드는 함수 안에 있는 모든 변수를 함수 맨 꼭대기로 끌어올린 것처럼 작동한다. (Hoisting)
//     ㄴ 함수 선언의 경우 함수 선언( function 함수(){} )만 상단으로 끌어올려지고, 함수 표현식( var a = function(){} )은 끌어올려지지 않는다.
// ETC.
// 1.
// foo(); // TypeError : foo is not a function
// var foo = function() {
//   console.log("bar");
// }
// 2.
// foo(); // bar 출력
// function foo() {
//   console.log("bar");
// }
